TODO for the go api:
	
	- WEB API -
	
	[*] [0] -> "/signup"
	[*] [1] -> "/login"
	[*] [2] -> "/UpdateUserImage"
	[*] [3] -> "/UpdateUserBackground"
	[*] [4] -> "/query"
	[*] [5] -> "/MakePost"
	[*] [6] -> "/GetAllPosts"
	[*] [7] -> "/Update"
	[*] [8] -> "/getUserPosts"
	[*] [9] -> "/<user_id>"
	
	[*] [10] -> create python cdn api to store Images/Videos.. (Zimg)

		The idea would be like this: 
			if the user was added with success we will send the images to the cdn and will be organized this way:
				
				[!] <UserID>
					[*] img.{fileExt}
					[*]	bg.{fileExt}
			the json format that will be posted to the cdn will be like this:
				bg: <img base64>
				img: <img base64>
	[*] [11] -> integrate the cdn into the server ops, including updating images, posting...
		[*] -> signup
		[*] -> addPostImg.
		[*] -> Update()
		(Not tested yet!)
	[*] [12] -> create mechanism to add likes, comments to post.

		the idea would be like this:
			if a user liked a certain post we will add 1 to the like_count in the post row. then get who liked it and add their id to the liked text which is like this: id1|id2|id3.... and if someone wants to see who liked the post we will return array of ids then scrap the user with /<user_id> route.
			note: submitting a liked flag with a string will be prohibited so it is not going to break or anything.

	[*] [13] -> add comments (I have no idea how to do this now!)
	[*] [14] -> add following mechanism
	[ ] [15] -> add push notification support
		[ ] add db table.
		[ ] add generic getters and inserters.
		NOTES: The data will be distrubuted to the db, then to the socket enpoint to push a notification to the user. if he is online.
		[ ] add a socket 

	- APPLICATION LAYER API -
	[*] [0] MakeServerResponse
	[*] [1] getUserByAT
	[*] [2] VerifyJWT
	[*] [3]	EncodeJWT
	[*] [4] HashPassword
	[*] [5] verifyUserPassword
	[*] [6] getPostsById
	[*] [7] GetUserByAccessToken :)





